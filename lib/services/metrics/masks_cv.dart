// lib/services/metrics/masks_cv.dart
import 'package:opencv_dart/opencv_dart.dart' as cv;

/// ‡∏™‡∏£‡πâ‡∏≤‡∏á mask "‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏™‡πâ‡∏ô" ‡∏à‡∏≤‡∏Å‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏î‡∏≥‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏Ç‡∏≤‡∏ß (‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏≥‡∏Å‡πá‡πÑ‡∏î‡πâ)
/// ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå 8U: 255=‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏à‡∏£‡∏¥‡∏á, 0=‡∏≠‡∏∑‡πà‡∏ô ‡πÜ (‡∏£‡∏ß‡∏°‡πÄ‡∏™‡πâ‡∏ô)
cv.Mat buildInsideMaskFromTemplateGray(cv.Mat templateGray, {int otsuBias = 0}) {
  final g = (templateGray.channels > 1)
      ? cv.cvtColor(templateGray, cv.COLOR_BGR2GRAY)
      : templateGray.clone();

  // ‡πÅ‡∏¢‡∏Å‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ OTSU (+bias ‡πÑ‡∏î‡πâ)
  final otsu =
      cv.threshold(g, 0.0, 255.0, cv.THRESH_BINARY | cv.THRESH_OTSU).$1 + otsuBias;

  final binLight = cv.threshold(g, otsu, 255.0, cv.THRESH_BINARY).$2;
  final binDark  = cv.threshold(g, otsu, 255.0, cv.THRESH_BINARY_INV).$2;

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà ‚Äú‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤‚Äù ‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏•‡∏≤‡∏Ç‡∏≤‡∏ß‡∏û‡∏∑‡πâ‡∏ô‡∏î‡∏≥ ‚áí binLight)
  final nLight = cv.countNonZero(binLight);
  final nDark  = cv.countNonZero(binDark);
  final inside = (nLight <= nDark) ? binLight : binDark;

  // ‡∏Å‡∏±‡∏ô anti-alias: ‡∏ó‡∏≥‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß floodFill
  final thick = cv.dilate(
    cv.bitwiseNOT(inside), // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏µ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ä‡∏±‡∏î
    cv.getStructuringElement(cv.MORPH_ELLIPSE, (3, 3)),
  );
  final canvas = cv.bitwiseNOT(thick);

  // floodFill ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 128 (opencv_dart: image, seedPoint, newVal)
  cv.floodFill(canvas, cv.Point(0, 0), cv.Scalar.all(128));

  // outside = 128/255, inside = not outside
  final outside = cv.threshold(canvas, 127.0, 255.0, cv.THRESH_BINARY).$2;
  final insideRough = cv.bitwiseNOT(outside);

  // ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ thick ‡πÄ‡∏î‡∏¥‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Ñ‡∏£‡∏≤‡∏ö‡πÄ‡∏™‡πâ‡∏ô)
  final insideNoLine = cv.subtract(insideRough, thick);

  // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏Ç‡∏≠‡∏ö‡∏™‡∏∞‡∏≠‡∏≤‡∏î
  final insideClean = cv.morphologyEx(
    insideNoLine,
    cv.MORPH_OPEN,
    cv.getStructuringElement(cv.MORPH_RECT, (3, 3)),
  );

  final res = cv.convertScaleAbs(insideClean);
  print('üß© buildInsideMask: insidePx=${cv.countNonZero(res)} '
        'size=${res.cols}x${res.rows}');
  return res;
}

/// ‡∏´‡∏î mask ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏ä‡∏±‡πâ‡∏ô (‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á 2√ó2 ‡πÑ‡∏õ‡∏ä‡∏ô‡πÄ‡∏™‡πâ‡∏ô) ‚Äî ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢ ‡πÜ 1‚Äì4 px
cv.Mat shrinkInsideForSafeCount(cv.Mat inside, {int px = 2}) {
  final k = px.clamp(0, 8);
  if (k == 0) return inside;
  final ker = cv.getStructuringElement(cv.MORPH_ELLIPSE, (k, k));
  final er = cv.erode(inside, ker);
  print('üß© shrinkInside: px=$px -> insidePx=${cv.countNonZero(er)}');
  return er;
}

/// ‡∏ñ‡πâ‡∏≤ mask ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 255=‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
cv.Mat ensureWhiteIsInside(cv.Mat mask) {
  final total = mask.rows * mask.cols;
  final white = cv.countNonZero(mask);
  if (white < total / 2) {
    final r = cv.bitwiseNOT(mask);
    print('üß© ensureWhiteIsInside: inverted -> insidePx=${cv.countNonZero(r)}');
    return r;
  }
  print('üß© ensureWhiteIsInside: ok -> insidePx=${white}');
  return mask;
}
